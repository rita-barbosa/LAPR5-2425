// <auto-generated />
using System;
using MDBackoffice.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MDBackoffice.Migrations
{
    [DbContext(typeof(MDBackofficeDbContext))]
    partial class MDBackofficeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AppointmentHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("AppointmentHistory", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.AppointmentStaffs.AppointmentStaff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("StaffId");

                    b.ToTable("AppointmentStaffs");
                });

            modelBuilder.Entity("MDBackoffice.Domain.Appointments.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OperationRequestId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OperationRequestId");

                    b.HasIndex("RoomNumber");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.Logs.Log", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LogId");

                    b.Property<string>("ObjectClass")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ObjectClass");

                    b.Property<string>("ObjectReference")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ObjectReference");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OperationTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("OperationRequests");
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("OperationType", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypes.ValueObjects.RequiredStaff.RequiredStaff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OperationTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("RequiredStaff", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypesRecords.OperationTypeRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("OperationTypeRecords", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypesRecords.RequiredStaffRecord", b =>
                {
                    b.Property<string>("RequiredStaffRecordId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OperationTypeRecordId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("RequiredStaffRecordId");

                    b.HasIndex("OperationTypeRecordId");

                    b.ToTable("RequiredStaffRecords", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("DATE");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Status");

                    b.Property<string>("UserReference")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserReference")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MDBackoffice.Domain.RoomTypes.RoomType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.Rooms.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.Specializations.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Specialization", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.StaffProfiles.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Status");

                    b.Property<string>("UserReference")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserReference")
                        .IsUnique();

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.Tokens.Token", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("HasExpired");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.Users.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MDBackoffice.Domain.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppointmentHistory", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Patients.Patient", null)
                        .WithMany("AppointmentList")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MDBackoffice.Domain.Shared.Date", "CreatedAt", b1 =>
                        {
                            b1.Property<string>("AppointmentHistoryId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("CreatedAt");

                            b1.HasKey("AppointmentHistoryId");

                            b1.ToTable("AppointmentHistory");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentHistoryId");
                        });

                    b.Navigation("CreatedAt")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.AppointmentStaffs.AppointmentStaff", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Appointments.Appointment", "Appointment")
                        .WithMany("AppointmentStaffs")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDBackoffice.Domain.StaffProfiles.Staff", "Staff")
                        .WithMany("AppointmentStaffs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MDBackoffice.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("MDBackoffice.Domain.OperationRequests.OperationRequest", null)
                        .WithMany()
                        .HasForeignKey("OperationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDBackoffice.Domain.Rooms.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MDBackoffice.Domain.Shared.Slot", "Slot", b1 =>
                        {
                            b1.Property<string>("AppointmentId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .HasColumnType("longtext")
                                .HasColumnName("Description");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointment");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.OwnsOne("MDBackoffice.Domain.Shared.Date", "Date", b2 =>
                                {
                                    b2.Property<string>("SlotAppointmentId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<DateTime>("End")
                                        .HasColumnType("datetime(6)")
                                        .HasColumnName("EndDate");

                                    b2.Property<DateTime>("Start")
                                        .HasColumnType("datetime(6)")
                                        .HasColumnName("StartDate");

                                    b2.HasKey("SlotAppointmentId");

                                    b2.ToTable("Appointment");

                                    b2.WithOwner()
                                        .HasForeignKey("SlotAppointmentId");
                                });

                            b1.OwnsOne("MDBackoffice.Domain.Shared.TimeInterval", "TimeInterval", b2 =>
                                {
                                    b2.Property<string>("SlotAppointmentId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time(6)")
                                        .HasColumnName("EndTime");

                                    b2.Property<TimeSpan>("Start")
                                        .HasColumnType("time(6)")
                                        .HasColumnName("StartTime");

                                    b2.HasKey("SlotAppointmentId");

                                    b2.ToTable("Appointment");

                                    b2.WithOwner()
                                        .HasForeignKey("SlotAppointmentId");
                                });

                            b1.Navigation("Date")
                                .IsRequired();

                            b1.Navigation("TimeInterval")
                                .IsRequired();
                        });

                    b.OwnsOne("MDBackoffice.Domain.Appointments.AppointmentStatus", "Status", b1 =>
                        {
                            b1.Property<string>("AppointmentId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Status");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointment");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("Slot")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.Logs.Log", b =>
                {
                    b.OwnsOne("MDBackoffice.Domain.Logs.Change", "Change", b1 =>
                        {
                            b1.Property<string>("LogId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("ChangeDescription")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("ChangeDescription");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("ChangeType");

                            b1.HasKey("LogId");

                            b1.ToTable("Logs");

                            b1.WithOwner()
                                .HasForeignKey("LogId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Date", "DateOfChange", b1 =>
                        {
                            b1.Property<string>("LogId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("DateOfChange");

                            b1.HasKey("LogId");

                            b1.ToTable("Logs");

                            b1.WithOwner()
                                .HasForeignKey("LogId");
                        });

                    b.Navigation("Change")
                        .IsRequired();

                    b.Navigation("DateOfChange")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("MDBackoffice.Domain.OperationTypes.OperationType", null)
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDBackoffice.Domain.Patients.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDBackoffice.Domain.StaffProfiles.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MDBackoffice.Domain.Shared.Date", "DateOfRequest", b1 =>
                        {
                            b1.Property<string>("OperationRequestId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("DateOfRequest");

                            b1.HasKey("OperationRequestId");

                            b1.ToTable("OperationRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationRequestId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Date", "DeadLineDate", b1 =>
                        {
                            b1.Property<string>("OperationRequestId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("DeadLineDate");

                            b1.HasKey("OperationRequestId");

                            b1.ToTable("OperationRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationRequestId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationRequests.OperationRequestDescription", "Description", b1 =>
                        {
                            b1.Property<string>("OperationRequestId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("DescriptionText")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Description");

                            b1.HasKey("OperationRequestId");

                            b1.ToTable("OperationRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationRequestId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationRequests.OperationRequestStatus", "Status", b1 =>
                        {
                            b1.Property<string>("OperationRequestId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Status");

                            b1.HasKey("OperationRequestId");

                            b1.ToTable("OperationRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationRequestId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationRequests.Priority", "Priority", b1 =>
                        {
                            b1.Property<string>("OperationRequestId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Priority");

                            b1.HasKey("OperationRequestId");

                            b1.ToTable("OperationRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationRequestId");
                        });

                    b.Navigation("DateOfRequest")
                        .IsRequired();

                    b.Navigation("DeadLineDate")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Priority")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypes.OperationType", b =>
                {
                    b.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.EstimatedDuration", "EstimatedDuration", b1 =>
                        {
                            b1.Property<string>("OperationTypeId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("TotalDurationMinutes")
                                .HasColumnType("int")
                                .HasColumnName("EstimatedDuration");

                            b1.HasKey("OperationTypeId");

                            b1.ToTable("OperationType");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.OperationTypeName", "Name", b1 =>
                        {
                            b1.Property<string>("OperationTypeId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("OperationName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("OperationTypeName");

                            b1.HasKey("OperationTypeId");

                            b1.ToTable("OperationType");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.OperationTypeStatus", "Status", b1 =>
                        {
                            b1.Property<string>("OperationTypeId")
                                .HasColumnType("varchar(255)");

                            b1.Property<bool>("Active")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("OperationTypeStatus");

                            b1.HasKey("OperationTypeId");

                            b1.ToTable("OperationType");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeId");
                        });

                    b.OwnsMany("MDBackoffice.Domain.OperationTypes.ValueObjects.Phase.Phase", "Phases", b1 =>
                        {
                            b1.Property<string>("PhaseId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("OperationTypeId")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.HasKey("PhaseId");

                            b1.HasIndex("OperationTypeId");

                            b1.ToTable("Phase");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeId");

                            b1.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.Phase.PhaseDescription", "Description", b2 =>
                                {
                                    b2.Property<string>("PhaseId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasColumnType("longtext")
                                        .HasColumnName("PhaseDescription");

                                    b2.HasKey("PhaseId");

                                    b2.ToTable("Phase");

                                    b2.WithOwner()
                                        .HasForeignKey("PhaseId");
                                });

                            b1.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.Phase.PhaseDuration", "Duration", b2 =>
                                {
                                    b2.Property<string>("PhaseId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<int>("DurationMinutes")
                                        .HasColumnType("int")
                                        .HasColumnName("PhaseDuration");

                                    b2.HasKey("PhaseId");

                                    b2.ToTable("Phase");

                                    b2.WithOwner()
                                        .HasForeignKey("PhaseId");
                                });

                            b1.Navigation("Description")
                                .IsRequired();

                            b1.Navigation("Duration")
                                .IsRequired();
                        });

                    b.Navigation("EstimatedDuration")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phases");

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypes.ValueObjects.RequiredStaff.RequiredStaff", b =>
                {
                    b.HasOne("MDBackoffice.Domain.OperationTypes.OperationType", null)
                        .WithMany("RequiredStaff")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MDBackoffice.Domain.Shared.Function", "Function", b1 =>
                        {
                            b1.Property<string>("RequiredStaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Function");

                            b1.HasKey("RequiredStaffId");

                            b1.ToTable("RequiredStaff");

                            b1.WithOwner()
                                .HasForeignKey("RequiredStaffId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.RequiredStaff.NumberStaff", "StaffQuantity", b1 =>
                        {
                            b1.Property<string>("RequiredStaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("NumberRequired")
                                .HasColumnType("int");

                            b1.HasKey("RequiredStaffId");

                            b1.ToTable("RequiredStaff");

                            b1.WithOwner()
                                .HasForeignKey("RequiredStaffId");
                        });

                    b.Navigation("Function")
                        .IsRequired();

                    b.Navigation("StaffQuantity")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypesRecords.OperationTypeRecord", b =>
                {
                    b.OwnsOne("MDBackoffice.Domain.OperationTypesRecords.OperationTypeParentId", "OperationTypeId", b1 =>
                        {
                            b1.Property<string>("OperationTypeRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("OpID")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("OperationTypeId");

                            b1.HasKey("OperationTypeRecordId");

                            b1.ToTable("OperationTypeRecords");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeRecordId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Date", "EffectiveDate", b1 =>
                        {
                            b1.Property<string>("OperationTypeRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("EffectiveDate");

                            b1.HasKey("OperationTypeRecordId");

                            b1.ToTable("OperationTypeRecords");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeRecordId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.EstimatedDuration", "EstimatedDuration", b1 =>
                        {
                            b1.Property<string>("OperationTypeRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("TotalDurationMinutes")
                                .HasColumnType("int")
                                .HasColumnName("EstimatedDuration");

                            b1.HasKey("OperationTypeRecordId");

                            b1.ToTable("OperationTypeRecords");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeRecordId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.OperationTypeName", "Name", b1 =>
                        {
                            b1.Property<string>("OperationTypeRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("OperationName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("OperationTypeName");

                            b1.HasKey("OperationTypeRecordId");

                            b1.ToTable("OperationTypeRecords");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeRecordId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.OperationTypeStatus", "Status", b1 =>
                        {
                            b1.Property<string>("OperationTypeRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<bool>("Active")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("OperationTypeStatus");

                            b1.HasKey("OperationTypeRecordId");

                            b1.ToTable("OperationTypeRecords");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeRecordId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypesRecords.OperationTypeRecordVersion", "Version", b1 =>
                        {
                            b1.Property<string>("OperationTypeRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("Version")
                                .HasColumnType("int")
                                .HasColumnName("Version");

                            b1.HasKey("OperationTypeRecordId");

                            b1.ToTable("OperationTypeRecords");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeRecordId");
                        });

                    b.OwnsMany("MDBackoffice.Domain.OperationTypesRecords.PhaseRecord", "Phases", b1 =>
                        {
                            b1.Property<string>("PhaseId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("OperationTypeRecordId")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.HasKey("PhaseId");

                            b1.HasIndex("OperationTypeRecordId");

                            b1.ToTable("PhaseRecord");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeRecordId");

                            b1.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.Phase.PhaseDescription", "Description", b2 =>
                                {
                                    b2.Property<string>("PhaseRecordPhaseId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasColumnType("longtext")
                                        .HasColumnName("PhaseDescription");

                                    b2.HasKey("PhaseRecordPhaseId");

                                    b2.ToTable("PhaseRecord");

                                    b2.WithOwner()
                                        .HasForeignKey("PhaseRecordPhaseId");
                                });

                            b1.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.Phase.PhaseDuration", "Duration", b2 =>
                                {
                                    b2.Property<string>("PhaseRecordPhaseId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<int>("DurationMinutes")
                                        .HasColumnType("int")
                                        .HasColumnName("PhaseDuration");

                                    b2.HasKey("PhaseRecordPhaseId");

                                    b2.ToTable("PhaseRecord");

                                    b2.WithOwner()
                                        .HasForeignKey("PhaseRecordPhaseId");
                                });

                            b1.Navigation("Description")
                                .IsRequired();

                            b1.Navigation("Duration")
                                .IsRequired();
                        });

                    b.Navigation("EffectiveDate")
                        .IsRequired();

                    b.Navigation("EstimatedDuration")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("OperationTypeId")
                        .IsRequired();

                    b.Navigation("Phases");

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("Version")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypesRecords.RequiredStaffRecord", b =>
                {
                    b.HasOne("MDBackoffice.Domain.OperationTypesRecords.OperationTypeRecord", null)
                        .WithMany("RequiredStaffRecords")
                        .HasForeignKey("OperationTypeRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MDBackoffice.Domain.Shared.Function", "Function", b1 =>
                        {
                            b1.Property<string>("RequiredStaffRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Function");

                            b1.HasKey("RequiredStaffRecordId");

                            b1.ToTable("RequiredStaffRecords");

                            b1.WithOwner()
                                .HasForeignKey("RequiredStaffRecordId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypes.ValueObjects.RequiredStaff.NumberStaff", "StaffQuantity", b1 =>
                        {
                            b1.Property<string>("RequiredStaffRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("NumberRequired")
                                .HasColumnType("int")
                                .HasColumnName("NumberRequired");

                            b1.HasKey("RequiredStaffRecordId");

                            b1.ToTable("RequiredStaffRecords");

                            b1.WithOwner()
                                .HasForeignKey("RequiredStaffRecordId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.OperationTypesRecords.StaffSpecialization", "SpecializationId", b1 =>
                        {
                            b1.Property<string>("RequiredStaffRecordId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("SpeciId")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Specialization");

                            b1.HasKey("RequiredStaffRecordId");

                            b1.ToTable("RequiredStaffRecords");

                            b1.WithOwner()
                                .HasForeignKey("RequiredStaffRecordId");
                        });

                    b.Navigation("Function")
                        .IsRequired();

                    b.Navigation("SpecializationId")
                        .IsRequired();

                    b.Navigation("StaffQuantity")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.Patients.Patient", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("MDBackoffice.Domain.Patients.Patient", "UserReference")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("MDBackoffice.Domain.Patients.Gender", "Gender", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Denomination")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Gender");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Patients.MedicalCondition", "MedicalCondition", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("MedicalCondition");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.ResidentialAddress", "Address", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Residence")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Residence");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Email", "Email", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Phone", "EmergencyContact", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("EmergencyContactCountryCode");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("EmergencyContact");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Name", "Name", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("FirstName");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("FullName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("LastName");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Phone", "PhoneNumber", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("CountryCode");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("EmergencyContact")
                        .IsRequired();

                    b.Navigation("Gender")
                        .IsRequired();

                    b.Navigation("MedicalCondition");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.RoomTypes.RoomType", b =>
                {
                    b.OwnsOne("MDBackoffice.Domain.RoomTypes.RoomTypeDescription", "Description", b1 =>
                        {
                            b1.Property<string>("RoomTypeId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Description");

                            b1.HasKey("RoomTypeId");

                            b1.ToTable("RoomTypes");

                            b1.WithOwner()
                                .HasForeignKey("RoomTypeId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.RoomTypes.RoomTypeDesignation", "Designation", b1 =>
                        {
                            b1.Property<string>("RoomTypeId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Designation")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Designation");

                            b1.HasKey("RoomTypeId");

                            b1.ToTable("RoomTypes");

                            b1.WithOwner()
                                .HasForeignKey("RoomTypeId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Designation")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.Rooms.Room", b =>
                {
                    b.HasOne("MDBackoffice.Domain.RoomTypes.RoomType", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MDBackoffice.Domain.Rooms.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<string>("RoomId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("CapcityNumber")
                                .HasColumnType("int")
                                .HasColumnName("Capacity");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Rooms.CurrentStatus", "CurrentStatus", b1 =>
                        {
                            b1.Property<string>("RoomId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("CurrentStatus");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.OwnsMany("MDBackoffice.Domain.Rooms.Equipment", "AvailableEquipment", b1 =>
                        {
                            b1.Property<string>("RoomId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("EquipmentName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("EquipmentName");

                            b1.HasKey("RoomId", "Id");

                            b1.ToTable("RoomAvailableEquipment", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.OwnsMany("MDBackoffice.Domain.Shared.Slot", "MaintenanceSlots", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<string>("Description")
                                .HasColumnType("longtext")
                                .HasColumnName("Description");

                            b1.Property<string>("RoomId")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.HasKey("Id");

                            b1.HasIndex("RoomId");

                            b1.ToTable("RoomMaintenanceSlots", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RoomId");

                            b1.OwnsOne("MDBackoffice.Domain.Shared.Date", "Date", b2 =>
                                {
                                    b2.Property<Guid>("SlotId")
                                        .HasColumnType("char(36)");

                                    b2.Property<DateTime>("End")
                                        .HasColumnType("datetime(6)")
                                        .HasColumnName("EndDate");

                                    b2.Property<DateTime>("Start")
                                        .HasColumnType("datetime(6)")
                                        .HasColumnName("StartDate");

                                    b2.HasKey("SlotId");

                                    b2.ToTable("RoomMaintenanceSlots");

                                    b2.WithOwner()
                                        .HasForeignKey("SlotId");
                                });

                            b1.OwnsOne("MDBackoffice.Domain.Shared.TimeInterval", "TimeInterval", b2 =>
                                {
                                    b2.Property<Guid>("SlotId")
                                        .HasColumnType("char(36)");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time(6)")
                                        .HasColumnName("EndTime");

                                    b2.Property<TimeSpan>("Start")
                                        .HasColumnType("time(6)")
                                        .HasColumnName("StartTime");

                                    b2.HasKey("SlotId");

                                    b2.ToTable("RoomMaintenanceSlots");

                                    b2.WithOwner()
                                        .HasForeignKey("SlotId");
                                });

                            b1.Navigation("Date")
                                .IsRequired();

                            b1.Navigation("TimeInterval")
                                .IsRequired();
                        });

                    b.Navigation("AvailableEquipment");

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("CurrentStatus")
                        .IsRequired();

                    b.Navigation("MaintenanceSlots");
                });

            modelBuilder.Entity("MDBackoffice.Domain.Specializations.Specialization", b =>
                {
                    b.OwnsOne("MDBackoffice.Domain.Specializations.SpecializationDenomination", "Denomination", b1 =>
                        {
                            b1.Property<string>("SpecializationId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Denomination")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Denomination");

                            b1.HasKey("SpecializationId");

                            b1.ToTable("Specialization");

                            b1.WithOwner()
                                .HasForeignKey("SpecializationId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Specializations.SpecializationDescription", "Description", b1 =>
                        {
                            b1.Property<string>("SpecializationId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Description");

                            b1.HasKey("SpecializationId");

                            b1.ToTable("Specialization");

                            b1.WithOwner()
                                .HasForeignKey("SpecializationId");
                        });

                    b.Navigation("Denomination")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.StaffProfiles.Staff", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Specializations.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDBackoffice.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("MDBackoffice.Domain.StaffProfiles.Staff", "UserReference")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("MDBackoffice.Domain.StaffProfiles.LicenseNumber", "LicenseNumber", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("LicenseNumber");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staff");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.ResidentialAddress", "Address", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Residence")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Residence");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staff");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Email", "Email", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staff");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Function", "Function", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Function");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staff");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Name", "Name", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("FirstName");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("FullName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("LastName");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staff");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("MDBackoffice.Domain.Shared.Phone", "Phone", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("CountryCode");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("StaffId");

                            b1.ToTable("Staff");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsMany("MDBackoffice.Domain.Shared.Slot", "Slots", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<string>("Description")
                                .HasColumnType("longtext")
                                .HasColumnName("Description");

                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("Id");

                            b1.HasIndex("StaffId");

                            b1.ToTable("StaffSlots", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("StaffId");

                            b1.OwnsOne("MDBackoffice.Domain.Shared.Date", "Date", b2 =>
                                {
                                    b2.Property<Guid>("SlotId")
                                        .HasColumnType("char(36)");

                                    b2.Property<DateTime>("End")
                                        .HasColumnType("datetime(6)")
                                        .HasColumnName("EndDate");

                                    b2.Property<DateTime>("Start")
                                        .HasColumnType("datetime(6)")
                                        .HasColumnName("StartDate");

                                    b2.HasKey("SlotId");

                                    b2.ToTable("StaffSlots");

                                    b2.WithOwner()
                                        .HasForeignKey("SlotId");
                                });

                            b1.OwnsOne("MDBackoffice.Domain.Shared.TimeInterval", "TimeInterval", b2 =>
                                {
                                    b2.Property<Guid>("SlotId")
                                        .HasColumnType("char(36)");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time(6)")
                                        .HasColumnName("EndTime");

                                    b2.Property<TimeSpan>("Start")
                                        .HasColumnType("time(6)")
                                        .HasColumnName("StartTime");

                                    b2.HasKey("SlotId");

                                    b2.ToTable("StaffSlots");

                                    b2.WithOwner()
                                        .HasForeignKey("SlotId");
                                });

                            b1.Navigation("Date")
                                .IsRequired();

                            b1.Navigation("TimeInterval")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Function")
                        .IsRequired();

                    b.Navigation("LicenseNumber")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("MDBackoffice.Domain.Tokens.Token", b =>
                {
                    b.OwnsOne("MDBackoffice.Domain.Tokens.TokenType", "TokenType", b1 =>
                        {
                            b1.Property<string>("TokenId")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("TokenId");

                            b1.ToTable("Token");

                            b1.WithOwner()
                                .HasForeignKey("TokenId");

                            b1.OwnsOne("MDBackoffice.Domain.Tokens.TokenTypeDenomination", "TypeDenomination", b2 =>
                                {
                                    b2.Property<string>("TokenTypeTokenId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("Denomination")
                                        .IsRequired()
                                        .HasColumnType("longtext")
                                        .HasColumnName("TokenTypeDenomination");

                                    b2.HasKey("TokenTypeTokenId");

                                    b2.ToTable("Token");

                                    b2.WithOwner()
                                        .HasForeignKey("TokenTypeTokenId");
                                });

                            b1.OwnsOne("MDBackoffice.Domain.Tokens.TokenTypeExpirationDuration", "ExpirationDurationHours", b2 =>
                                {
                                    b2.Property<string>("TokenTypeTokenId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<int>("Hours")
                                        .HasColumnType("int")
                                        .HasColumnName("ExpirationDurationInHours");

                                    b2.HasKey("TokenTypeTokenId");

                                    b2.ToTable("Token");

                                    b2.WithOwner()
                                        .HasForeignKey("TokenTypeTokenId");
                                });

                            b1.Navigation("ExpirationDurationHours")
                                .IsRequired();

                            b1.Navigation("TypeDenomination")
                                .IsRequired();
                        });

                    b.Navigation("TokenType")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDBackoffice.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MDBackoffice.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MDBackoffice.Domain.Appointments.Appointment", b =>
                {
                    b.Navigation("AppointmentStaffs");
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("RequiredStaff");
                });

            modelBuilder.Entity("MDBackoffice.Domain.OperationTypesRecords.OperationTypeRecord", b =>
                {
                    b.Navigation("RequiredStaffRecords");
                });

            modelBuilder.Entity("MDBackoffice.Domain.Patients.Patient", b =>
                {
                    b.Navigation("AppointmentList");
                });

            modelBuilder.Entity("MDBackoffice.Domain.StaffProfiles.Staff", b =>
                {
                    b.Navigation("AppointmentStaffs");
                });
#pragma warning restore 612, 618
        }
    }
}
