@startuml
'https://plantuml.com/sequence-diagram

title "US 5.1.5. Process View (Level 3)"

autonumber

participant "<<component>>\n Routing" as ROUTE
participant "<<component>>\n PatientController" as CONTROL

participant "<<component>>\n AuthenticationService" as AUTHServ

participant "<<component>>\n UserDTO" as UserDTO

participant "<<component>>\n UserRepository" as AUTHRepo

participant "<<component>>\n EmailService" as EMAILServ

participant "<<component>>\n TokenService" as TOKENServ
participant "<<component>>\n Token" as TOKEN
participant "<<component>>\n TokenDTO" as TokenDTO
participant "<<component>>\n TokenRepository" as TOKENRepo

participant "<<component>>\n PatientService" as PATIENTServ
participant "<<component>>\n PatientRepository" as PATIENTRepo


[o-> ROUTE : DELETE(json)
activate ROUTE

ROUTE -> CONTROL : deleteAccount(json)
activate CONTROL

CONTROL -> UserDTO** : toDTO(credentialsData)

CONTROL -> AUTHServ : validatePatientUser(userDTO)
activate AUTHServ

AUTHServ -> AUTHRepo : findByID(usernameString)
activate AUTHRepo


AUTHRepo --> AUTHServ : user
deactivate AUTHRepo

AUTHServ -> AUTHRepo : isUserAPatient(user)
activate AUTHRepo

AUTHRepo --> AUTHServ : true
deactivate AUTHRepo

AUTHServ -> UserDTO ** : toDTO(user)

AUTHServ --> CONTROL : completeUserDTO
deactivate AUTHServ

|||
'SENDING EMAIL

CONTROL -> EMAILServ : sendAccountDeletionConfirmationEmail(userDTO)
activate EMAILServ

EMAILServ -> TOKENServ : generateDeletionAccountToken()
activate TOKENServ

TOKENServ -> TOKEN **

TOKENServ -> TOKENRepo : save(token)
activate TOKENRepo


TOKENRepo --> TOKENServ : return
deactivate TOKENRepo

TOKENServ -> TokenDTO ** : toDTO(token)

TOKENServ --> EMAILServ : tokenDTO
deactivate TOKENServ

EMAILServ -> EMAILServ : sendEmail(emailString, tokenDTO, emailTitle, emailBody)
activate EMAILServ
deactivate EMAILServ


EMAILServ --> CONTROL : return
deactivate EMAILServ

CONTROL --> ROUTE : return
deactivate CONTROL

alt success
[o<-- ROUTE : 200 OK

else failure

[o<-- ROUTE : 400 Bad Request
deactivate ROUTE
end alt

|||

'CONFIRMATION

[o-> ROUTE : GET(json)
note left
After clicking on the
link of the account
deletion confirmation email
end note
activate ROUTE

ROUTE -> CONTROL : confirmAccountDeletion(json)
activate CONTROL

CONTROL -> TokenDTO ** : toDTO(tokenData)
CONTROL -> UserDTO ** : toDTO(credentialsData)

CONTROL -> TOKENServ : validateToken(tokenDTO)
activate TOKENServ

TOKENServ -> TOKENRepo : findByID(tokenDtoID)
activate TOKENRepo

TOKENRepo --> TOKENServ : token
deactivate TOKENRepo

TOKENServ -> TOKENServ : checkTokenValidityTime(token)

TOKENServ --> CONTROL : true
deactivate TOKENServ

CONTROL -> AUTHServ : deleteAccount(userDTO)
activate AUTHServ

AUTHServ -> AUTHServ : validatePatientUser(userDTO)

AUTHServ -> PATIENTServ : deletePatientProfile(patientIDString)
activate PATIENTServ

PATIENTServ -> PATIENTRepo : getByID(patientIDString)
activate PATIENTRepo

PATIENTRepo --> PATIENTServ : patient
deactivate PATIENTRepo

PATIENTServ -> PATIENTRepo : remove(patient)
activate PATIENTRepo


PATIENTRepo --> PATIENTServ : return
deactivate PATIENTRepo

PATIENTServ --> AUTHServ : return
deactivate PATIENTServ

AUTHServ -> AUTHRepo :  findByID(usernameString)
activate AUTHRepo

AUTHRepo --> AUTHServ : user
deactivate AUTHRepo

AUTHServ -> AUTHRepo : remove(user)
activate AUTHRepo


AUTHRepo --> AUTHServ : return
deactivate AUTHRepo

AUTHServ --> CONTROL : return
deactivate AUTHServ

CONTROL --> ROUTE : return
deactivate CONTROL

alt success
[o<-- ROUTE : 200 OK

else failure

[o<-- ROUTE : 400 Bad Request
deactivate ROUTE
end alt

@enduml